---
title: "Interactive Plots with Plotly"
author: "Niall McGuinness"
date: "12/16/23"  #MM/DD/YY
date-modified: now #notice how easy it is to add a date
#execute - not everyone wants to see code (echo) or internal warnings and we can also cache code output to speed up our render process - we can still override this in the code chunks (see below)
execute:
  echo: true
  warning: false
  cache: true
format: 
  html:
    # add a dark/light theme switcher to top RHS
    theme:            
      light: journal
      dark: darkly
    #allows text to occupy max page width
    page-layout: full 
    #toc
    toc: true
    toc-location: left
    toc-title: "Table of Contents"
    number-sections: false
     #code - control how code is presented
    code-link: true
    code-line-numbers: true
    code-overflow: scroll
    code-copy: true
    code-block-border-left: true
    code-block-bg: true
    code-fold: true #shows all code in collapsed mode
---


```{r}
#| echo: false
#| warning: false

# gives us ggplot2, dplyr, readr, tibble etc
if(!require("tidyverse"))
  install.packages("tidyverse")
library(tidyverse)

# interactive plots
if(!require("plotly"))
  install.packages("plotly")
library(plotly)

# support for color blind users - see scale_color_colorblind() below
if(!require("ggthemes"))
  install.packages("ggthemes")
library(ggthemes)

```

## Creating Interactive Plots with Plotly

We can convert most plots generated using ggplot2 (even those made with Esquisse) to be interactive by doing the following:

a. Include the Plotly library.
b. Pass the *ggplot()* output into *ggplotly()*.

### Interactive Scatterplot

@fig-mpgweight was generated using Esquisse on a separate simple R file (see  [4_EsquisseScratch](./4_EsquisseScratch.R) in the same folder as this file).

```{r}
#| label: fig-mpgweight
#| fig-cap: Fuel Consumption vs Weight
#| fig-cap-location: top
#| fig-align: center
#| fig-asp: 0.625
#| echo: true
#| warning: false

p <- ggplot(mtcars) +
  aes(x = mpg, y = wt, size = wt) +
  geom_point(shape = "circle", colour = "#4682B4") +
  scale_color_colorblind() +
  labs(
    x = "Fuel Consumption (tonnes)", 
    y = "Weight (kg)") +
  theme(
    plot.title = element_text(size = 14L,
    hjust = 0.5),
    plot.subtitle = element_text(size = 12L,
    hjust = 0.5)
  )

ggplotly(p) 
```

### Interactive Violinplot

@fig-temperature is the same plot from 1_Intro_To_Quarto with the addition of only 1 line of code (i.e. ggplotly(p))

```{r}
#| label: fig-temperature
#| fig-cap: Temperature (Jan - June 2023).
#| fig-cap-location: top
#| fig-align: center
#| fig-asp: 0.625
#| echo: true
#| warning: false

# month names for x-axis
month.names <- c("May", "June", "July", "August", "September")

# this was generated using esquisse
p <- ggplot(airquality) +
  aes(x = factor(Month, labels = month.names), 
      y = Temp, 
      fill = Month) +
  geom_violin(adjust = 0.4, scale = "area") +
  scale_fill_distiller(palette = "RdYlBu", 
                       direction = 1) +
  labs(
    x = "Month",
    y = "Temperature(Â°C)"
  ) +
  theme_minimal() +
  theme(legend.position = "none") +
  facet_wrap(
    vars(Month),
    scales = "free_x",
    ncol = 5L,
    nrow = 1L
  )

ggplotly(p)
```

### Interactive Heatmap

Finally, @fig-dummyheat illustrates a heat map with colours chosen from an interactive color palette picker site, [Coolors](https://coolors.co/palettes/trending) and specified with with the  *scale_fill_gradient2()* method commented out in the code below. 

We also support color blind users by including *scale_color_colorblind()* and the *ggthemes* library above.

```{r}
#| label: fig-dummyheat
#| fig-cap: Some Data
#| fig-cap-location: top
#| fig-align: center
#| echo: true
#| warning: false

# Dummy data
x <- LETTERS[1:12]
y <- paste0("var", seq(1,12))
data <- expand.grid(X=x, Y=y)
data$Z <- runif(144, 0, 5)
 
# Heatmap 
p <- ggplot(data, aes(X, Y, fill= Z)) + 
  geom_tile() +
  # scale_color_colorblind() +
  scale_fill_gradient2(
    low = "#184e77", 
    high = "#52b69a") + 
   labs(
    x = "An x-axis label",
    y = "A y-axis label",
    fill = "Amazing Legend"
  )
  
ggplotly(p)
```

### Other Possibilities 

Obviously, most of the plots generated with ggplot can be converted to this interactive format including:

- **Scatter Plots**: Show relationships between two continuous variables.
- **Line Plots**: Useful for time series data or connecting points in order.
- **Bar Charts**: Display categorical data, includes regular and stacked bar charts.
- **Histograms**: Show the distribution of a continuous variable.
- **Box Plots**: Display distribution of a variable, showing quartiles and outliers.
- **Violin Plots**: Similar to box plots, but include a kernel density estimation.
- **Heatmaps**: Represent data where colors denote values.
- **Facetted Plots**: Support interactive facets, breaking down data into multiple panels.
- **Error Bars and Confidence Intervals**: Added to plots like scatter plots or bar charts to represent data uncertainty.
- **Area Plots**: Showcase quantitative data visually.
- **Density Plots**: Visualize the distribution of a continuous variable.







